<?php

namespace App\Http\Controllers;
use App\Client;
use App\Project;
use App\Application;
use App\PaaS;

use App\Criterion;
use App\Alternative;
use Illuminate\Http\Request;
use \PDF;
use Illuminate\Support\Facades\Input;
use Illuminate\Support\Facades\DB;
use Config;
use Illuminate\Support\Facades\Storage;

class ProjectController extends Controller
{

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(Client $client)
    {
        //
      $projects = Project::where('client_id','=',$client->id)->paginate(50);

      
      return view('projects.index',compact('client','projects'));
    }


    public function delete(Project $project){


      $project->criteria()->detach();
      $project->alternatives()->detach();
      DB::table('alternative_matrix')->where('project_id', $project->id)->delete();
      DB::table('alternative_ranking')->where('project_id', $project->id)->delete();
      DB::table('application_criteria_matrix')->where('project_id', $project->id)->delete();
      DB::table('application_criteria_ranking')->where('project_id', $project->id)->delete();
      DB::table('application_alternative_ranking')->where('project_id', $project->id)->delete();
      $project->applications()->detach();
      $project->delete();
       session()->flash('message','Project deleted');
       return back(); 
    }



    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(Client $client)
    {
     $criterias = Criterion::all();
     $alternatives = Alternative::all();
     return view('projects.add',compact('client','criterias','alternatives'));
   }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request, Client $client)
    {
        //
      $project = new Project;
      $project->name = $request->name;
      $project->description = $request->description;
      $project->type = $request->type;

      $count = 0;

      $crit=0;
      $new_project = $client->projects()->save($project);

      $project->criteria()->attach($request->input('criterias'));
      $project->alternatives()->attach($request->input('alternatives'));
      $project=$project->id;


       $all_alternatives = DB::table('project_alternative')->where('project_id', $project)->pluck('ap_id');


       $all_criteria = DB::table('project_criteria')->where('project_id', $project)->pluck('cp_id');


   foreach ($all_criteria as $criteria) {

 //   $a = [[]];
   /* $all_alternative_values = DB::table('alternative_ranking')->where('project_id', $project)
    ->where('cp_id',$criteria)->orderBy('ap_id', 'asc')->pluck('value');*/


  //  $k=0;
    for($i=0;$i<sizeof($all_alternatives);$i++)
    {
      for($j=0;$j<sizeof($all_alternatives);$j++){

        if($i==$j){
        //  $a[$i][$j]=1;
           DB::table('alternative_matrix')->insert(
        ['project_id' => $project, 
        'cp_id'=>$criteria,
        'ap_id'=>$all_alternatives[$i],
        'vs_ap_id'=>$all_alternatives[$i],
        'value'=>1,
        'created_at' => new \DateTime()]
        );
        
        }
        else if($i>$j){

        //  $a[$i][$j] = (1/$a[$j][$i]);

             DB::table('alternative_matrix')->insert(
        ['project_id' => $project, 
        'cp_id'=>$criteria,
        'ap_id'=>$all_alternatives[$i],
        'vs_ap_id'=>$all_alternatives[$j],
        'value'=>0,
        'created_at' => new \DateTime()
        ]
        );

        }else{
         // $a[$i][$j] = $all_alternative_values[$k];
         // $k = $k+1;
           DB::table('alternative_matrix')->insert(
        ['project_id' => $project, 
        'cp_id'=>$criteria,
        'ap_id'=>$all_alternatives[$i],
        'vs_ap_id'=>$all_alternatives[$j],
         'value'=>0,
        'created_at' => new \DateTime()
        ]
        );
        }



      }

    }

    for ($i = 0; $i < sizeof($all_alternatives); $i++) {
     DB::table('alternative_ranking')->insert(
        ['project_id' => $project, 
        'cp_id'=> $criteria,
        'ap_id'=>$all_alternatives[$i],
        'normalize_1'=>0,
        'normalize_2'=>0,
        'created_at' => new \DateTime()]
        );
   
     

   }
 }
      
      return redirect('clients/project/criteria/'.$count.'/'.$project.'/'.$crit);

    }


    public function appPriority(Project $project,Application $application){

      $count = 0;
      $outerLoop = 0;
      $innerLoop = 0;
      session()->forget('application_id');
      session()->forget('application_name');
      session()->put('application_id',$application->id);

      $project=$project->id;

    
   $all_alternatives =  DB::table('project_alternative')->where('project_id', $project)->pluck('ap_id');


      $all_criteria = DB::table('project_criteria')->where('project_id', $project)->pluck('cp_id');

     


  $application_id =session()->get('application_id');

    
    $flag = DB::table('application_criteria_matrix')->where('project_id', $project)->where('application_id', $application_id)->value('cp_id');




if($flag==""){
 for($i=0;$i<sizeof($all_criteria);$i++)
 {
  for($j=0;$j<sizeof($all_criteria);$j++){

    if($i==$j){
     
      DB::table('application_criteria_matrix')->insert(
            ['project_id' => $project, 
             'application_id' => $application_id,
             'cp_id'=>$all_criteria[$i],
             'vs_cp_id'=>$all_criteria[$i],
             'value'=>1,
             'created_at' => new \DateTime()]
              );

    }
    else if($i>$j){
     
       DB::table('application_criteria_matrix')->insert(
            ['project_id' => $project, 
             'application_id' => $application_id,
             'cp_id'=>$all_criteria[$i],
             'vs_cp_id'=>$all_criteria[$j],
             'value'=>0,
             'created_at' => new \DateTime()]
              );

    }else{
     
       DB::table('application_criteria_matrix')->insert(
            ['project_id' => $project, 
             'application_id' => $application_id,
             'cp_id'=>$all_criteria[$i],
             'vs_cp_id'=>$all_criteria[$j],
             'value'=>0,
             'created_at' => new \DateTime()]
              );
     
    }



  }

}

for ($i = 0; $i < sizeof($all_criteria); $i++) {
     DB::table('application_criteria_ranking')->insert(
        ['project_id' => $project, 
        'application_id' =>  $application_id,
        'cp_id'=> $all_criteria[$i],
        'normalize_1'=>0,
        'normalize_2'=>0,
        'created_at' => new \DateTime()]
        );
   }
$j=1;
for ($i = 0; $i < sizeof($all_alternatives); $i++) {

    DB::table('application_alternative_ranking')->insert(
        ['project_id' => $project, 
        'application_id'=>$application_id,
        'alternative_id'=>0,
        'ranking'=>$j,
        'created_at' => new \DateTime()]
        );
    $j++;
     }

}

 return redirect('project/application/prioritize/'.$count.'/'.$innerLoop.'/'.$outerLoop.'/'.$project);
     
    }






    public function addCriteria(Request $request,$count,$innerLoop,$outerLoop,$project){

      $all_criteria = DB::table('project_criteria')->where('project_id', $project)->pluck('criteria_id');

$application_id =session()->get('application_id');
$application_name = DB::table('applications')->where('id', $application_id)->value('name');

      if($count>0){

        $row = session()->get('row');

        $column = session()->get('column');

        
        $cp_id = DB::table('project_criteria')->where('project_id', $project)->where('criteria_id', $row)->value('cp_id');
        $vs_cp_id = DB::table('project_criteria')->where('project_id', $project)->where('criteria_id', $column)->value('cp_id');




        $critOption = $request->cloud;
        $critValue = $request->scale;

        if($critOption==$row){


 DB::table('application_criteria_matrix')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$cp_id)
            ->where('vs_cp_id',$vs_cp_id)
            ->update(['value' =>$critValue,
                      'updated_at'=> new \DateTime()]);

 DB::table('application_criteria_matrix')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$vs_cp_id)
            ->where('vs_cp_id',$cp_id)
            ->update(['value' =>(1/$critValue),'updated_at'=> new \DateTime()]);

        

          }
        else if($critOption==$column){



         

   DB::table('application_criteria_matrix')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$cp_id)
            ->where('vs_cp_id',$vs_cp_id)
            ->update(['value' =>(1/$critValue),'updated_at'=> new \DateTime()]);

 DB::table('application_criteria_matrix')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$vs_cp_id)
            ->where('vs_cp_id',$cp_id)
            ->update(['value' =>$critValue,'updated_at'=> new \DateTime()]);


          }

}
                 session()->forget('row');
                 session()->forget('column');

                   $n = sizeof($all_criteria);
 
           function factorial($n) {
                           
                 if ($n <= 1) {
                     return 1;
              } 
              else {
                   return factorial($n - 1) * $n;
                             }
                                  }



          function combinations($n, $k) {


                   if ($n < $k) {
                         return 0;
                } 
                else {
                    return factorial($n)/(factorial($k)*factorial(($n - $k)));
                                }
                                        }


                    $combination = combinations($n,2);


if($count < $combination){



  if($innerLoop == (sizeof($all_criteria)-1)){

    $outerLoop = $outerLoop+1;
    $innerLoop = 0;
    $innerLoop = $outerLoop + 1;

  }else{
    $innerLoop=$innerLoop+1;
  }

  $crit1Id = $all_criteria[$outerLoop];
  $crit1 = Criterion::find($crit1Id);

  $crit2Id = $all_criteria[$innerLoop];
  $crit2 = Criterion::find($crit2Id);

  $count=$count+1;

  session()->put('row',   $crit1Id);
  session()->put('column',$crit2Id);

  
    //  session()->put('application_name',$application_name);



  return view('projects.criterias',compact('count','project','crit1','crit2','innerLoop','outerLoop','application_name'));

}else{

 $a = [[]];
 $all_vals = DB::table('application_criteria_matrix')->where('project_id', $project)
 ->where('application_id',$application_id)->pluck('value');

 

 $k=0;
 for($i=0;$i<sizeof($all_criteria);$i++)
 {
  for($j=0;$j<sizeof($all_criteria);$j++){

    if($i==$j){
      $a[$i][$j]= $all_vals[$k];
    }
    else if($i>$j){
      $a[$i][$j] =  $all_vals[$k];

    }else{
      $a[$i][$j] = $all_vals[$k];
      
    }
$k = $k+1;


  }

}

/*echo "<table border='1'>";
for ($row = 0; $row < sizeof($all_criteria); $row++) {
  echo "<tr>";
  for ($col = 0; $col < sizeof($all_criteria); $col++) {
    echo "<td>".$a[$row][$col]."</td>";
  }
  echo "</tr>";
}
echo "</table>";*/


/*$index=array(
  array(1,1/2,3),
  array(2,1,4),
  array(1/3,1/4,1),
  );*/


//-------------------------------------------------------square of first matrix--------------------------
$square_1 = [[]];
 $all_criteria = DB::table('project_criteria')->where('project_id', $project)->pluck('cp_id');

  $sum=0;
      for($c=0; $c<sizeof($all_criteria); $c++)
         {
            for($d=0; $d<sizeof($all_criteria); $d++)
            {   
               for($k=0; $k<sizeof($all_criteria); $k++)
               {
                  $sum = $sum + $a[$c][$k] * $a[$k][$d];
               }
 
                DB::table('application_criteria_matrix')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$all_criteria[$c])
            ->where('vs_cp_id',$all_criteria[$d])
            ->update(['square_1' =>$sum,'iteration' => 1,'updated_at'=> new \DateTime()]);

               $square_1[$c][$d] = $sum;
               $sum = 0;
            }
         }

 /*echo "<table border='1'>";
    for ($row = 0; $row < sizeof($all_criteria); $row++) {
      echo "<tr>";
      for ($col = 0; $col < sizeof($all_criteria); $col++) {
        echo "<td>".$square_1[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";*/


$comp=array();$sum=0;
for ($row = 0; $row < sizeof($all_criteria); $row++) {
  $comp[$row]=0;
  for ($col = 0; $col < sizeof($all_criteria); $col++) {
    $comp[$row]=$comp[$row]+$square_1[$row][$col];
  }
  $sum=$sum +  $comp[$row];
}

for ($col = 0; $col < sizeof($all_criteria); $col++) {echo "the value is: ";
       /* echo "<td>".$comp[$col]."</td>";echo "<br>";
      echo "normalized value is  ";
      echo ($comp[$col]/$sum);echo "<br>";*/
      DB::table('application_criteria_ranking')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$all_criteria[$col])
            ->update(['normalize_1' =>($comp[$col]/$sum),'updated_at'=> new \DateTime()]);

      }
/*echo "<br>";
echo "<br>";

echo "iteration 2";*/
//----------------------------------------Square_2 of result matrix---------------------------------------
 $square_2 = [[]];

  $sum=0;
      for($c=0; $c<sizeof($all_criteria); $c++)
         {
            for($d=0; $d<sizeof($all_criteria); $d++)
            {   
               for($k=0; $k<sizeof($all_criteria); $k++)
               {
                  $sum = $sum + $square_1[$c][$k] * $square_1[$k][$d];
               }
 
                DB::table('application_criteria_matrix')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$all_criteria[$c])
            ->where('vs_cp_id',$all_criteria[$d])
            ->update(['square_2' =>$sum,'iteration' => 2,'updated_at'=> new \DateTime()]);

               $square_2[$c][$d] = $sum;
               $sum = 0;
            }
         }

 /*echo "<table border='1'>";
    for ($row = 0; $row < sizeof($all_criteria); $row++) {
      echo "<tr>";
      for ($col = 0; $col < sizeof($all_criteria); $col++) {
        echo "<td>".$square_2[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";*/



$comp2=array();$sum=0;
for ($row = 0; $row < sizeof($all_criteria); $row++) {
  $comp2[$row]=0;
  for ($col = 0; $col < sizeof($all_criteria); $col++) {
    $comp2[$row]=$comp2[$row]+$square_2[$row][$col];
  }
  $sum=$sum +  $comp2[$row];
}

$criteriaRanking =array();
for ($col = 0; $col < sizeof($all_criteria); $col++) {
  /*echo "the value is: ";
        echo "<td>".$comp2[$col]."</td>";echo "<br>";
      echo "normalized value is  ";
      echo ($comp2[$col]/$sum);echo "<br>";*/

      $criteriaRanking[$col] = ($comp2[$col]/$sum);
      DB::table('application_criteria_ranking')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$all_criteria[$col])
            ->update(['normalize_2' =>($comp2[$col]/$sum),'updated_at'=> new \DateTime()]);

      }

/*echo "<br>";

for ($col = 0; $col < sizeof($all_criteria); $col++) {
   echo $criteriaRanking[$col];
  echo "<br>";
  }*/

//echo "<br>";

$projectRanking =  DB::table('alternative_ranking')->where('project_id', $project)->pluck('normalize_2');

//echo "<br>";
$all_alternatives = DB::table('project_alternative')->where('project_id', $project)->pluck('ap_id');

/*for ($col = 0; $col < (sizeof($all_criteria)*sizeof($all_alternatives)); $col++) {
   echo $projectRanking[$col];
  echo "<br>";
  }

echo "<br>";*/
$projArray = [[]];
$k=0;
for($row = 0;$row <sizeof($all_criteria);$row++){
  
  for ($col = 0; $col <sizeof($all_alternatives); $col++) {

          $projArray[$col][$row] =  $projectRanking[$k];
          $k++;

  }

}

 //var_dump($projArray);
/*
 echo "<table border='1'>";
    for ($row = 0; $row < sizeof($all_alternatives); $row++) {
      echo "<tr>";
      for ($col = 0; $col <sizeof($all_criteria); $col++) {
        echo "<td>".$projArray[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";*/

$sum=0;
$finalRank =array();
$compareArray = array();
for($c=0; $c<sizeof($all_alternatives); $c++)
         {  
             
               for($k=0; $k<sizeof($all_criteria); $k++)
               {
                  
                  $sum = $sum + $projArray[$c][$k] * $criteriaRanking[$k];
                  
               }
 

               $finalRank[$c] = $sum;
              
               $sum = 0;
           
         }


/*echo "<br>";*/
$project_alts = DB::table('project_alternative')->where('project_id', $project)->pluck('alternative_id');
$rankArray =array();
for ($col = 0; $col < sizeof($project_alts); $col++) {
   /*echo $project_alts[$col];
   echo "     ";
   echo $finalRank[$col];
  echo "<br>";*/
  $rankArray[$project_alts[$col]] = $finalRank[$col];
  
  }
  /*print_r($rankArray);
echo "final result-------------";*/

arsort($rankArray);

/*print_r($rankArray);
echo "<br>";*/
$i=0;

foreach ($rankArray as $key => $value) {

 $compareArray[$i] = $key;
 echo $rankArray[$key];
 $i++;
}

//echo "final result in array-------------";
$cloudNames =array();
$j=1;
for($i=0;$i<sizeof($project_alts);$i++){

 // echo $compareArray[$i];

  $varName = DB::table('alternatives')->where('id', $compareArray[$i])->value('name');

  $cloudNames[] = $varName;


 DB::table('application_alternative_ranking')
      ->where('project_id',$project)
      ->where('application_id',$application_id)
      ->where('ranking',$j)
      ->update(['alternative_id'=>$compareArray[$i],'updated_at'=> new \DateTime()]);

$j++;
//echo "<br>";

}

$j=1;
foreach ($rankArray as $key => $value) {

 DB::table('application_alternative_ranking')
      ->where('project_id',$project)
      ->where('application_id',$application_id)
      ->where('ranking',$j)
      ->update(['weightage'=>$rankArray[$key]]);
 $j++;

}


 $supportedPaas = PaaS::getSupportedPaas($cloudNames[0],$application_id);
  
                        if(!empty($supportedPaas)){
                          $disposition_1 = "Modernise";
                          $platform_1 = $supportedPaas[0];
                        }
                        


                        if (empty($supportedPaas)){

                          $disposition_1 = "Migrate";
                          $platform_1 = "IAAS";
                           DB::table('application_project')
                               ->where('project_id',$project)
                               ->where('application_id',$application_id)
                                ->update(['platform_1'=>$platform_1,
                                          'disposition_1'=>$disposition_1,
                                          'cloud_suitability_1' =>$cloudNames[0],
                                          'cloud_suitability_2' =>$cloudNames[1],
                                          'cloud_suitability_3' =>$cloudNames[2],
                                          'completed' => 2,'updated_at'=> new \DateTime()]);
                        }
                        else if(sizeof($supportedPaas)==1){

                         //$disposition_1 = "Modernise";
                       //  $platform_1 = $supportedPaas[0];
                          DB::table('application_project')
                               ->where('project_id',$project)
                               ->where('application_id',$application_id)
                                ->update(['platform_1'=>$platform_1,
                                          'cloud_suitability_1' =>$cloudNames[0],
                                          'cloud_suitability_2' =>$cloudNames[1],
                                          'cloud_suitability_3' =>$cloudNames[2],
                                          'completed' => 2,'updated_at'=> new \DateTime()]);

                        }
                        else if(sizeof($supportedPaas)==2){

                          //$disposition_1 = "Modernise";
                         // $platform_1 = $supportedPaas[0];
                          $platform_2 = $supportedPaas[1];
                          DB::table('application_project')
                               ->where('project_id',$project)
                               ->where('application_id',$application_id)
                                ->update(['platform_1'=>$platform_1,
                                          'platform_2'=>$platform_2,
                                          'cloud_suitability_1' =>$cloudNames[0],
                                          'cloud_suitability_2' =>$cloudNames[1],
                                          'cloud_suitability_3' =>$cloudNames[2],
                                          'completed' => 2,'updated_at'=> new \DateTime()]);

                        }
                        else {
                         //$disposition_1 = "Modernise";
                        //$platform_1 = $supportedPaas[0];
                         $platform_2 = $supportedPaas[1];
                         $platform_3 = $supportedPaas[2];
                         DB::table('application_project')
                               ->where('project_id',$project)
                               ->where('application_id',$application_id)
                                ->update(['platform_1'=>$platform_1,
                                          'platform_2'=>$platform_2,
                                          'platform_3'=>$platform_3,
                                          'disposition_1'=>$disposition_1,
                                          'cloud_suitability_1' =>$cloudNames[0],
                                          'cloud_suitability_2' =>$cloudNames[1],
                                          'cloud_suitability_3' =>$cloudNames[2],
                                          'completed' => 2,'updated_at'=> new \DateTime()]);


                       }

/* DB::table('application_project')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->update(['platform_1'=>$PLATFORM,
                      'cloud_suitability_1' =>$cloudNames[0],
                      'cloud_suitability_2' =>$cloudNames[1],
                      'cloud_suitability_3' =>$cloudNames[2],
                      'completed' => 2]);*/

//return "Success";
 return redirect('/projects/'.$project.'/applications');

}



}


public function addAlter(Request $request,$count,$project,$crit){

  $all_alternatives = DB::table('project_alternative')->where('project_id', $project)->pluck('alternative_id');


  $all_criteria = DB::table('project_criteria')->where('project_id', $project)->pluck('criteria_id');

  $cycle = $count + 1;




  $n = sizeof($all_alternatives);



  if($count == 0 and $crit == 0){

  }else{

    $ap =session()->get('ap1');
    $vs_ap =session()->get('ap2');
    $cp =session()->get('cp');

    $ap_id = DB::table('project_alternative')->where('project_id', $project)->where('alternative_id', $ap)->value('ap_id');
    $vs_ap_id = DB::table('project_alternative')->where('project_id', $project)->where('alternative_id', $vs_ap)->value('ap_id');
    $cp_id = DB::table('project_criteria')->where('project_id', $project)->where('criteria_id', $cp)->value('cp_id');

    $critOption = $request->cloud;
    $critValue = $request->scale;


    if($critOption==$ap){
/*
      DB::table('alternative_ranking')->insert(
        ['project_id' => $project, 
        'cp_id'=>$cp_id,
        'ap_id'=>$ap_id,
        'vs_ap_id'=>$vs_ap_id,
        'value'=>$critValue]
        );*/


        DB::table('alternative_matrix')
            ->where('project_id',$project)
            ->where('cp_id',$cp_id)
            ->where('ap_id',$ap_id)
            ->where('vs_ap_id',$vs_ap_id)
            ->update(['value' =>$critValue]);

             DB::table('alternative_matrix')
            ->where('project_id',$project)
            ->where('cp_id',$cp_id)
            ->where('ap_id',$vs_ap_id)
            ->where('vs_ap_id',$ap_id)
            ->update(['value' =>(1/$critValue)]);



    }
    else if($critOption==$vs_ap){

      DB::table('alternative_matrix')
            ->where('project_id',$project)
            ->where('cp_id',$cp_id)
            ->where('ap_id',$ap_id)
            ->where('vs_ap_id',$vs_ap_id)
            ->update(['value' =>(1/$critValue)]);

              DB::table('alternative_matrix')
            ->where('project_id',$project)
            ->where('cp_id',$cp_id)
             ->where('ap_id',$vs_ap_id)
            ->where('vs_ap_id',$ap_id)
            ->update(['value' =>$critValue]);


    }
  }




  function factorial($n) {
    if ($n <= 1) {
      return 1;
    } else {
      return factorial($n - 1) * $n;
    }
  }

  function combinations($n, $k) {
    //note this defualts to 0 if $n < $k

    if ($n < $k) {
      return 0;
    } else {
      return factorial($n)/(factorial($k)*factorial(($n - $k)));
    }
  }

  $combination = combinations($n,2);
//return $combination;

  if($crit <  sizeof($all_criteria)){


    session()->forget('ap1');
    session()->forget('ap2');
    session()->forget('cp');


    if($count==0){



      $alt1Id = $all_alternatives[$count];
      $alt1 = Alternative::find($alt1Id);
      $count = $count + 1;

      $alt2Id = $all_alternatives[$count];
      $alt2 = Alternative::find($alt2Id);

    }else{


      $rowLimit =  $count + 1;

      if($rowLimit<$combination){

       $alt1Id = $all_alternatives[0];
       $alt1 = Alternative::find($alt1Id);

       $count = $count + 1;

       $alt2Id = $all_alternatives[$count];
       $alt2 = Alternative::find($alt2Id);

     }

     else{
      $alt1Id = $all_alternatives[$count-1];
      $alt1 = Alternative::find($alt1Id);

      $alt2Id = $all_alternatives[$count];
      $alt2 = Alternative::find($alt2Id);
    }

  }

  if($cycle == $combination){
    $count=0;
    $rowLimit=0;
    $cycle = 0;

    $criteriaId = $all_criteria[$crit];
    $criteria = Criterion::find($criteriaId);
    $crit = $crit + 1;

  }else{
    $criteriaId = $all_criteria[$crit];
    $criteria = Criterion::find($criteriaId);
  }

  session()->put('ap1',$alt1Id);
  session()->put('ap2',$alt2Id);
  session()->put('cp',$criteriaId);

  return view('projects.alternatives',compact('count','project','alt1','alt2','criteria','crit'));

}
else{


  $all_criteria = DB::table('alternative_matrix')->where('project_id', $project)->distinct()->pluck('cp_id');


  foreach ($all_criteria as $criteria) {

    $a = [[]];
   
    $all_alternative_values = DB::table('alternative_matrix')->where('project_id', $project)
    ->where('cp_id',$criteria)->orderBy('ap_id', 'asc')->pluck('value');


    $k=0;
    for($i=0;$i<sizeof($all_alternatives);$i++)
    {
      for($j=0;$j<sizeof($all_alternatives);$j++){

        if($i==$j){
          $a[$i][$j]=$all_alternative_values[$k];
        }
        else if($i>$j){
          $a[$i][$j] = $all_alternative_values[$k];

        }else{
          $a[$i][$j] = $all_alternative_values[$k];
         
        }
 $k = $k+1;


      }

    }

   /* echo "<table border='1'>";
    for ($row = 0; $row < sizeof($all_alternatives); $row++) {
      echo "<tr>";
      for ($col = 0; $col < sizeof($all_alternatives); $col++) {
        echo "<td>".$a[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";*/
//-------------------------------------Square of first matrix----------------------------------------
    $square_1 = [[]];
     $all_alternatives =  DB::table('project_alternative')->where('project_id', $project)->pluck('ap_id');

      $sum=0;
      for($c=0; $c<sizeof($all_alternatives); $c++)
         {
            for($d=0; $d<sizeof($all_alternatives); $d++)
            {   
               for($k=0; $k<sizeof($all_alternatives); $k++)
               {
                  $sum = $sum + $a[$c][$k] * $a[$k][$d];
               }
 
                DB::table('alternative_matrix')
            ->where('project_id',$project)
            ->where('cp_id',$criteria)
            ->where('ap_id',$all_alternatives[$c])
            ->where('vs_ap_id',$all_alternatives[$d])
            ->update(['square_1' =>$sum,'iteration' => 1,'updated_at'=> new \DateTime()]);

               $square_1[$c][$d] = $sum;
               $sum = 0;
            }
         }

    /*echo "<table border='1'>";
    for ($row = 0; $row < sizeof($all_alternatives); $row++) {
      echo "<tr>";
      for ($col = 0; $col < sizeof($all_alternatives); $col++) {
        echo "<td>".$square_1[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";*/


$comp=array();$sum=0;
for ($row = 0; $row < sizeof($all_alternatives); $row++) {
  $comp[$row]=0;
  for ($col = 0; $col < sizeof($all_alternatives); $col++) {
    $comp[$row]=$comp[$row]+$square_1[$row][$col];
  }
  $sum=$sum +  $comp[$row];
}

for ($col = 0; $col < sizeof($all_alternatives); $col++) {echo "the value is: ";
       /* echo "<td>".$comp[$col]."</td>";echo "<br>";
      echo "normalized value is  ";
      echo ($comp[$col]/$sum);echo "<br>";*/
      DB::table('alternative_ranking')
            ->where('project_id',$project)
            ->where('cp_id',$criteria)
            ->where('ap_id',$all_alternatives[$col])
            ->update(['normalize_1' =>($comp[$col]/$sum),'updated_at'=> new \DateTime()]);

      }
/*echo "<br>";
echo "<br>";

echo "iteration 2";*/
//----------------------------------------Square_2 of result matrix---------------------------------------
 $square_2 = [[]];


      $sum=0;
      for($c=0; $c<sizeof($all_alternatives); $c++)
         {
            for($d=0; $d<sizeof($all_alternatives); $d++)
            {   
               for($k=0; $k<sizeof($all_alternatives); $k++)
               {
                  $sum = $sum +  $square_1[$c][$k] *  $square_1[$k][$d];
               }
 
                DB::table('alternative_matrix')
            ->where('project_id',$project)
            ->where('cp_id',$criteria)
            ->where('ap_id',$all_alternatives[$c])
            ->where('vs_ap_id',$all_alternatives[$d])
            ->update(['square_2' =>$sum,'iteration' => 2,'updated_at'=> new \DateTime()]);

               $square_2[$c][$d] = $sum;
               $sum = 0;
            }
         }

    /*echo "<table border='1'>";
    for ($row = 0; $row < sizeof($all_alternatives); $row++) {
      echo "<tr>";
      for ($col = 0; $col < sizeof($all_alternatives); $col++) {
        echo "<td>".$square_2[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";*/


$comp2=array();
$sum=0;
for ($row = 0; $row < sizeof($all_alternatives); $row++) {
  $comp2[$row]=0;
  for ($col = 0; $col < sizeof($all_alternatives); $col++) {
    $comp2[$row]=$comp2[$row]+$square_2[$row][$col];
  }
  $sum=$sum +  $comp2[$row];
}

for ($col = 0; $col < sizeof($all_alternatives); $col++) {echo "the value is: ";
       
      DB::table('alternative_ranking')
            ->where('project_id',$project)
            ->where('cp_id',$criteria)
            ->where('ap_id',$all_alternatives[$col])
            ->update(['normalize_2' =>($comp2[$col]/$sum),'updated_at'=> new \DateTime()]);

      }

  }



  //return "Success";
 $clientId = DB::table('projects')->where('id', $project)->value('client_id');
  
  


}
 //session()->flash('message','Project created');
return redirect('/clients/'.$clientId.'/projects');
}


    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    public function associateApplications(Project $project)
    {
        //
        //return $project->applications;
        //$applications = Application::where('client_id','=',$project->client_id)->get();
      $applications = Application::where(['client_id'=> $project->client_id, 'completion'=>'100'])->get();
        //return $applications;
      return view('projects.associate_applications',compact('project','applications'));
    }

    public function storeapplications(Request $request,Project $project)
    {

        //$project->applications()->attach($request->input('applications'));
      if($request->input('applications') != null){
        $project->applications()->sync($request->input('applications'));
      }

      $project->total_applications = $project->applications->count();
      $project->save();
        //$project->load('applications');
        //return $project;
        //Process each incomplete application
      foreach($project->applications as $application)
      {
       //$supportedPaas = PaaS::getSupportedPaas($application);
            //echo $application->name."<br>";

       
       if($application->pivot->completed == 0)
       {
        $disposition_1          = "";
        $cloud_suitability_1    = "";
        $platform_1             = "";
        $completed              = 0;




        if ($application->stage == 'EOL'){
          if($application->eoldriver == 'BU'){
            $disposition_1 = "Retire";
            $cloud_suitability_1 = "NA";
            $platform_1 = "NA"; 
            $completed = 2;
          }
          elseif($application->eoldriver == 'TE'){
            $disposition_1 = "Develop";


             $cloud_suitability_1 = "";
            $platform_1 = "Cloud Foundry";

            $completed = 1;
          }  
        }
        elseif ($application->stage == 'AEOL'){
          if($application->eoldriver == 'BU'){
            $disposition_1 = "Retain";
            $cloud_suitability_1 = "NA";
            $platform_1 = "NA";
            $completed = 2;
          }
          elseif($application->eoldriver == 'TE'){
            $disposition_1 = "Develop";

            $cloud_suitability_1 = "";
            $platform_1 = "Cloud Foundry";

            $completed = 1;
          }
        }
        elseif ($application->stage == 'NEW' or $application->stage == 'EUMN' or $application->stage=="EMAN")
        {

          if ($application->type == 'DESKTOP'){
            if($application->development_responsibility == "COTS" or $application->stage == 'NEW'){
                            //Retain desktop application that is either COTS or NEW
              $disposition_1 = "Retain";
              $cloud_suitability_1 = "NA";
              $platform_1 = "NA";
              $completed = 2;
            }else{
                            //Redevelop other desktop applications which are in existing stage
              $disposition_1 = "Develop";

               $cloud_suitability_1 = "";
              $platform_1 = "Cloud Foundry";

              $completed = 1;
            }
          } else //NON DESKTOP APPLICATION
                    {
                        //echo "IN ELSE<br>+++<br>";
                        //Decide for non-desktop new and existing applications
                      if($application->development_responsibility == "COTS")
                      {
                        $disposition_1 = "Migrate";
                        $platform_1 = "IaaS";
                        $completed = 1;
                      }
                      elseif($application->source_code_available == 0)
                      {
                            //Source code is not available
                        $disposition_1 = "Migrate";
                        $platform_1 = "IaaS";
                        $completed = 1;
                      }
                      else{
                         $disposition_1 = "Modernise";
                         $platform_1 = "";
                         $completed = 1;
                          } 
                      }

                      foreach($application->hardware as $hw){

                                    if($hw->code == "32BITRISC"){
                                         $disposition_1 = "Retain";
                                         $cloud_suitability_1 = "NA";
                                         $platform_1 = "NA";
                                         $completed = 2;
                                                               }

                                     }
                      
                      foreach($application->operating_systems as $os){

                        if($os->code == "MAINFRAME"){
                                $disposition_1 = "Retain";
                                $cloud_suitability_1 = "NA";
                                $platform_1 = "NA";
                                $completed = 2;

                        }
                      }

                      foreach($application->dependencies as $dependency){

                        if($dependency->name == "Hardware Dependent"){
                                $disposition_1 = "Retain";
                                $cloud_suitability_1 = "NA";
                                $platform_1 = "NA";
                                $completed = 2;

                        }
                      }
               
                 }

                 if($cloud_suitability_1 != "NA")
                 {
                  if($application->data_confidentiality == "NOT_OUTSIDE_ENT_FIREWALL")
                  {
                    if($application->workload_variation == "NO_VARIATIOn" or $application->workload_variation =="PREDICTABLE")
                    {
                     // $cloud_suitability_1 = "Private";
                      $cloud_suitability_1 = "";
                    }
                    else
                    {
                      //$cloud_suitability_1 = "Hybrid";
                      $cloud_suitability_1 = "";
                    }
                  }
                  else
                  {
                    //$cloud_suitability_1 = "Public";
                    $cloud_suitability_1 = "";
                  }
                }
                //echo $application->data_confidentiality."<br>";  
                //echo $application->workload_variation."<br><br><br>";
               $project->applications()->updateExistingPivot($application->id,['disposition_1' => $disposition_1, 'cloud_suitability_1' => $cloud_suitability_1, 'platform_1'=> $platform_1, 'completed'=>$completed]);
              

             
              }






           }
        //Process each incomplete application
//return $platform_3;
 
           return redirect('/projects/'.$project->id.'/applications');

         }

         public function applications(Project $project)
         {
          return view('projects.applications',compact('project'));
        }


        public function checkAlternative(Project $project){

         $all_criteria = DB::table('alternative_matrix')->where('project_id', $project->id)->distinct()->pluck('cp_id');

          foreach($all_criteria as $cp_id){
          $projects = DB::table('alternative_matrix')
                      ->select('project_id','cp_id','ap_id','vs_ap_id','value')
                      ->where('project_id',$project->id)
                      ->where('cp_id',$cp_id)
                      ->whereColumn('ap_id','<','vs_ap_id')
                      ->orderBy('cp_id','asc')
                      ->orderBy('vs_ap_id','asc')
                      ->get();

          $matrix_values[] = $projects;

         }

          //return $proj;
$crit=0;
$alt=0;
            foreach($matrix_values as $criterias){
              $alt=0;
              foreach($criterias as $criteria){

                if($criteria->value==0.000){

                    break 2;
                }
                $alt++;
              }
              $crit++;
            }

            
            echo $alt;
            echo $crit;
//return "success";
             return redirect('clients/project/criteria/'.$alt.'/'.$project->id.'/'.$crit);

        }

        public function outcome(Project $project)
        {
        //
        //return $project->applications;
        //$applications = Application::where('client_id','=',$project->client_id)->get();
        //return $applications;
        //return view('projects.applications',compact('project','applications'));
        //print_r($project);
        //echo "<pre><br><br><br>applications ehre<br>";
        //foreach($project->applications as $application){

        //    echo $application->id."----".$application->pivot->disposition."<br>";
       //}
        //echo "</pre>";
        //$price = $model->problems()->where('phone_problem', $problem->id)->firstOrFail()->pivot->price;
        //$disposition = $project->applications()->where('application_id', 1)->firstOrFail()->pivot->disposition;
        //echo $disposition;

        /*WORKING BLOCK
        foreach($project->applications as $application){
            echo $application->id."----".$application->stage."-----".$application->pivot->disposition_1."<br>";
            //$user->roles()->updateExistingPivot($roleId, $attributes);
            $d1 = "RETIRE";
            $project->applications()->updateExistingPivot($application->id,['disposition_1' => $d1, 'disposition_2' => $d1]);
        }
        *WORKING BLOCL*/
        
        


            /*
            foreach( as $platform){
                echo $platform->name."<br>";
              }*/
            //echo $disposition_1."<br>";
            //echo $cloud_suitability_1."<br>";
            //echo $platform_1."<br>";
            //$cloud_suitability_1="PRIVATE";



            //$project->applications()->updateExistingPivot($application->id,['disposition_1' => 'DEVELOP', 'platform_1'=> 'CLOUD FOUNDRY']);

        //return "hello";

            }

            public function report(Project $project, Application $application)
            {

        //$pdf = App::make('snappy.pdf.wrapper');
        //$pdf->loadHTML('<h1>Test</h1>');
        //return $pdf->inline();
        //
        //$html = '<h1>Bill</h1><p>You owe me money, dude.</p>';

        //$html = view('pdf.application',compact('application'));
        //$snappy->generateFromHtml($html, 'c:\temp\bill-12345.pdf');

/*$cloudType = "Public";
$CloudSupportedPaas = DB::table('iaas_paas')
                          ->join('paas','iaas_paas.paas_id','=','paas.id')
                          ->join('iaas','iaas_paas.iaas_id','=','iaas.id')
                          ->select('iaas_paas.paas_id','paas.name')
                          ->where('iaas.type',$cloudType)
                          ->groupBy('iaas_paas.paas_id','paas.name')
                          ->get();*/
//$firstCloud = "Public";

        //   $supportedPaas = PaaS::getSupportedPaas($firstCloud,$application->id);

          //  return $supportedPaas;

 /*foreach($application->hardware as $hw){

  if($hw->code=="32BITRISC"){
    $sc="success";
  }

 }*/


$criteriaId = DB::table('project_criteria')->where('project_id', $project->id)->pluck('criteria_id');


for($i=0;$i<sizeof($criteriaId);$i++){

  $ahpCriteriaData = DB::table('alternative_ranking')
->join('project_alternative','alternative_ranking.ap_id','=','project_alternative.ap_id')
->join('project_criteria','alternative_ranking.cp_id','=','project_criteria.cp_id')
->join('alternatives','project_alternative.alternative_id','=','alternatives.id')
->join('criteria','project_criteria.criteria_id','=','criteria.id')
->select('alternative_ranking.cp_id','criteria.name as criteria_name','alternative_ranking.ap_id','alternatives.name','alternative_ranking.normalize_2')
->where('project_alternative.project_id', $project->id)
->where('criteria.id',$criteriaId[$i])
->orderBy('alternative_ranking.cp_id','asc')
->orderBy('alternative_ranking.normalize_2','desc')
->get();

$allAhp[] = $ahpCriteriaData;

}


$ahpCriteriaMatrix =  DB::table('application_criteria_matrix')
->select('cp_id','vs_cp_id','value')
->where('project_id', $project->id)
->where('application_id', $application->id)
->whereColumn('cp_id', '<>', 'vs_cp_id')
->whereColumn('cp_id', '<', 'vs_cp_id')
->get();

$ahpCriteriaRank=[];

foreach($ahpCriteriaMatrix as $data){

$cp_name = DB::table('criteria')
                    ->join('project_criteria','project_criteria.criteria_id','=','criteria.id')
                    ->where('project_criteria.cp_id',$data->cp_id)
                    ->value('criteria.name');

$vs_cp_name = DB::table('criteria')
                    ->join('project_criteria','project_criteria.criteria_id','=','criteria.id')
                    ->where('project_criteria.cp_id',$data->vs_cp_id)
                    ->value('criteria.name');

if($data->value < 1){

  $value = DB::table('application_criteria_matrix')
                    ->where('cp_id',$data->vs_cp_id)
                    ->where('vs_cp_id',$data->cp_id)
                    ->where('project_id', $project->id)
                    ->where('application_id', $application->id)
                    ->value('value');

  $ahpCritName[] = $cp_name;
  $ahpCritName[] = $vs_cp_name;
  $ahpCritName[] = $data->value;
  $ahpCritName[] = $value;
 

}else{

$value = $data->value;
  $ahpCritName[] = $cp_name;
  $ahpCritName[] = $vs_cp_name;
  $ahpCritName[] = $data->value;
  $ahpCritName[] = round($value);
 }

 
 $ahpCriteriaRank[] = $ahpCritName;
  
  unset($ahpCritName);

}

 


$cloudRanking = DB::table('application_alternative_ranking')
                    ->join('alternatives','application_alternative_ranking.alternative_id','=','alternatives.id')
                    ->where('project_id', $project->id)
                    ->select('alternatives.name','application_alternative_ranking.weightage')
                    ->where('application_id', $application->id)
                    ->orderBy('application_alternative_ranking.weightage','desc')
                    ->get();





//return $ahpCriteriaRank;
                    /*if(!empty($ahpCriteriaRank)){
                      return "empty";
                    }else{
                      return "filled";
                    }*/


              $header = \View::make('layouts.pdfheader')->render();
              $footer = \View::make('layouts.pdffooter',compact('project','application'))->render();
        //return $header;
            //  $pdf = PDF::loadView('pdf.application', compact('project','application','ahpScalabilityData','ahpSecurityData','ahpLatencyData','ahpIntensityData'))
              $pdf = PDF::loadView('pdf.application', compact('project','application','allAhp','ahpCriteriaRank','cloudRanking'))
              ->setOption('header-html',$header)
              ->setOption('footer-html',$footer);
        //$pdf = PDF::generateFromHtml($html,'c:\temp\bill-1234586.pdf');
        //return $pdf->download('invoice.pdf');
        //return $pdf->setOrientation('landscape')->stream();
              return $pdf->inline();

            }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }


      public function testAlternative($project){

 $all_criteria = DB::table('alternative_matrix')->where('project_id', $project)->distinct()->pluck('cp_id');
$all_alternatives = DB::table('project_alternative')->where('project_id', $project)->pluck('ap_id');

  foreach ($all_criteria as $criteria) {echo "<br>";
echo "Criteria ------------- --------------- ".$criteria;
    $a = [[]];
   
    $all_alternative_values = DB::table('alternative_matrix')->where('project_id', $project)
    ->where('cp_id',$criteria)->orderBy('ap_id', 'asc')->pluck('value');


    $k=0;
    for($i=0;$i<sizeof($all_alternatives);$i++)
    {
      for($j=0;$j<sizeof($all_alternatives);$j++){

        if($i==$j){
          $a[$i][$j]=$all_alternative_values[$k];
        }
        else if($i>$j){
          $a[$i][$j] = $all_alternative_values[$k];

        }else{
          $a[$i][$j] = $all_alternative_values[$k];
         
        }
 $k = $k+1;


      }

    }
$arr1=array("Public","Private","Hybrid");

   
    echo "<table border='1'>";
echo "<tr>";echo "<th>&nbsp;</th>";
echo "<th> Public </th>";
echo "<th> Private </th>";
echo "<th> Hybrid </th>";
echo "</tr>";
    for ($row = 0; $row < sizeof($all_alternatives); $row++) {
      echo "<tr>";echo "<td><b>".$arr1[$row]."</b></td>";
      for ($col = 0; $col < sizeof($all_alternatives); $col++) {
        echo "<td width='30%'>".$a[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";
//-------------------------------------Square of first matrix----------------------------------------
    $square_1 = [[]];
     $all_alternatives =  DB::table('project_alternative')->where('project_id', $project)->pluck('ap_id');

      $sum=0;
      for($c=0; $c<sizeof($all_alternatives); $c++)
         {
            for($d=0; $d<sizeof($all_alternatives); $d++)
            {   
               for($k=0; $k<sizeof($all_alternatives); $k++)
               {
                  $sum = $sum + $a[$c][$k] * $a[$k][$d];
               }
 
              /*  DB::table('alternative_matrix')
            ->where('project_id',$project)
            ->where('cp_id',$criteria)
            ->where('ap_id',$all_alternatives[$c])
            ->where('vs_ap_id',$all_alternatives[$d])
            ->update(['square_1' =>$sum,'iteration' => 1]);
*/
               $square_1[$c][$d] = $sum;
               $sum = 0;
            }
         }

    echo "<table border='1'>";
    echo "<tr>";echo "<th>&nbsp;</th>";
echo "<th> Public </th>";
echo "<th> Private </th>";
echo "<th> Hybrid </th>";
echo "</tr>";
    for ($row = 0; $row < sizeof($all_alternatives); $row++) {
      echo "<tr>";echo "<td><b>".$arr1[$row]."</b></td>";
      for ($col = 0; $col < sizeof($all_alternatives); $col++) {
        echo "<td width='30%'>".$square_1[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";


$comp=array();$sum=0;
for ($row = 0; $row < sizeof($all_alternatives); $row++) {
  $comp[$row]=0;
  for ($col = 0; $col < sizeof($all_alternatives); $col++) {
    $comp[$row]=$comp[$row]+$square_1[$row][$col];
  }
  $sum=$sum +  $comp[$row];
}

for ($col = 0; $col < sizeof($all_alternatives); $col++) {echo "the value is: ";
        echo "<td>".$comp[$col]."</td>";echo "<br>";
      echo "normalized value is  ";
      echo ($comp[$col]/$sum);echo "<br>";echo "<br>";
  /*    DB::table('alternative_ranking')
            ->where('project_id',$project)
            ->where('cp_id',$criteria)
            ->where('ap_id',$all_alternatives[$col])
            ->update(['normalize_1' =>($comp[$col]/$sum)]);*/

      }
echo "<br>";
echo "<br>";

echo "iteration 2";echo "<br>";
//----------------------------------------Square_2 of result matrix---------------------------------------
 $square_2 = [[]];


      $sum=0;
      for($c=0; $c<sizeof($all_alternatives); $c++)
         {
            for($d=0; $d<sizeof($all_alternatives); $d++)
            {   
               for($k=0; $k<sizeof($all_alternatives); $k++)
               {
                  $sum = $sum +  $square_1[$c][$k] *  $square_1[$k][$d];
               }
 
               /* DB::table('alternative_matrix')
            ->where('project_id',$project)
            ->where('cp_id',$criteria)
            ->where('ap_id',$all_alternatives[$c])
            ->where('vs_ap_id',$all_alternatives[$d])
            ->update(['square_2' =>$sum,'iteration' => 2]);
*/
               $square_2[$c][$d] = $sum;
               $sum = 0;
            }
         }


    echo "<table border='1'>";
    echo "<tr>";echo "<th>&nbsp;</th>";
echo "<th> Public </th>";
echo "<th> Private </th>";
echo "<th> Hybrid </th>";
echo "</tr>";
    for ($row = 0; $row < sizeof($all_alternatives); $row++) {
      echo "<tr>";echo "<td><b>".$arr1[$row]."</b></td>";
      for ($col = 0; $col < sizeof($all_alternatives); $col++) {
        echo "<td width='30%'>".$square_2[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";


$comp2=array();
$sum=0;
for ($row = 0; $row < sizeof($all_alternatives); $row++) {
  $comp2[$row]=0;
  for ($col = 0; $col < sizeof($all_alternatives); $col++) {
    $comp2[$row]=$comp2[$row]+$square_2[$row][$col];
  }
  $sum=$sum +  $comp2[$row];
}

for ($col = 0; $col < sizeof($all_alternatives); $col++) {echo "the value is: ";
        echo "<td>".$comp2[$col]."</td>";echo "<br>";
      echo "normalized value is  ";
      echo ($comp2[$col]/$sum);echo "<br>";echo "<br>";
      /*DB::table('alternative_ranking')
            ->where('project_id',$project)
            ->where('cp_id',$criteria)
            ->where('ap_id',$all_alternatives[$col])
            ->update(['normalize_2' =>($comp2[$col]/$sum)]);*/

      }
echo "<br>";
echo "<br>";

echo "----------------------------------------------------------------end of criteria------------------------------------";
  }



  return "Success";




    }



    public function testCriteria($project,$application_id){

$a = [[]];
$all_criteria = DB::table('project_criteria')->where('project_id', $project)->pluck('criteria_id');
 $all_vals = DB::table('application_criteria_matrix')->where('project_id', $project)
 ->where('application_id',$application_id)->pluck('value');

 

 $k=0;
 for($i=0;$i<sizeof($all_criteria);$i++)
 {
  for($j=0;$j<sizeof($all_criteria);$j++){

    if($i==$j){
      $a[$i][$j]= $all_vals[$k];
    }
    else if($i>$j){
      $a[$i][$j] =  $all_vals[$k];

    }else{
      $a[$i][$j] = $all_vals[$k];
      
    }
$k = $k+1;


  }

}
$arr=array("Scalability","Security","Latency","IO Intensity");
echo "<table border='1'>";
echo "<tr>";
echo "<th>&nbsp;</th>";
echo "<th>Scalability </th>";
echo "<th> Security </th>";
echo "<th> Latency </th>";
echo "<th> IO Intensity </th>";
echo "</tr>";
for ($row = 0; $row < sizeof($all_criteria); $row++) {
  echo "<tr>"; echo "<td><b>".$arr[$row]."</b></td>";
  for ($col = 0; $col < sizeof($all_criteria); $col++) {
    echo "<td>".$a[$row][$col]."</td>";
  }
  echo "</tr>";
}
echo "</table>";


/*$index=array(
  array(1,1/2,3),
  array(2,1,4),
  array(1/3,1/4,1),
  );*/


//-------------------------------------------------------square of first matrix--------------------------
$square_1 = [[]];
 $all_criteria = DB::table('project_criteria')->where('project_id', $project)->pluck('cp_id');

  $sum=0;
      for($c=0; $c<sizeof($all_criteria); $c++)
         {
            for($d=0; $d<sizeof($all_criteria); $d++)
            {   
               for($k=0; $k<sizeof($all_criteria); $k++)
               {
                  $sum = $sum + $a[$c][$k] * $a[$k][$d];
               }
 /*
                DB::table('application_criteria_matrix')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$all_criteria[$c])
            ->where('vs_cp_id',$all_criteria[$d])
            ->update(['square_1' =>$sum,'iteration' => 1]);*/

               $square_1[$c][$d] = $sum;
               $sum = 0;
            }
         }


echo "<br>";
 echo "<table border='1'>";
 echo "<tr>";
echo "<th>&nbsp;</th>";
echo "<th>Scalability </th>";
echo "<th> Security </th>";
echo "<th> Latency </th>";
echo "<th> IO Intensity </th>";
echo "</tr>";
for ($row = 0; $row < sizeof($all_criteria); $row++) {
      echo "<tr>";
        echo "<td><b>".$arr[$row]."</b></td>";
      for ($col = 0; $col < sizeof($all_criteria); $col++) {
        echo "<td>".$square_1[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";


$comp=array();$sum=0;
for ($row = 0; $row < sizeof($all_criteria); $row++) {
  $comp[$row]=0;
  for ($col = 0; $col < sizeof($all_criteria); $col++) {
    $comp[$row]=$comp[$row]+$square_1[$row][$col];
  }
  $sum=$sum +  $comp[$row];
}

for ($col = 0; $col < sizeof($all_criteria); $col++) {echo "the value is: ";
        echo "<td>".$comp[$col]."</td>";echo "<br>";
      echo "normalized value is  ";
      echo ($comp[$col]/$sum);echo "<br>";echo "<br>";
    /*  DB::table('application_criteria_ranking')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$all_criteria[$col])
            ->update(['normalize_1' =>($comp[$col]/$sum)]);
*/
      }
echo "<br>";
echo "<br>";

echo "iteration 2";
//----------------------------------------Square_2 of result matrix---------------------------------------
 $square_2 = [[]];

  $sum=0;
      for($c=0; $c<sizeof($all_criteria); $c++)
         {
            for($d=0; $d<sizeof($all_criteria); $d++)
            {   
               for($k=0; $k<sizeof($all_criteria); $k++)
               {
                  $sum = $sum + $square_1[$c][$k] * $square_1[$k][$d];
               }
 
               /* DB::table('application_criteria_matrix')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$all_criteria[$c])
            ->where('vs_cp_id',$all_criteria[$d])
            ->update(['square_2' =>$sum,'iteration' => 2]);
*/
               $square_2[$c][$d] = $sum;
               $sum = 0;
            }
         }

 echo "<table border='1'>";
 echo "<tr>";echo "<th>&nbsp;</th>";
echo "<th>Scalability </th>";
echo "<th> Security </th>";
echo "<th> Latency </th>";
echo "<th> IO Intensity </th>";
echo "</tr>";
    for ($row = 0; $row < sizeof($all_criteria); $row++) {
      echo "<tr>";echo "<td><b>".$arr[$row]."</b></td>";
      for ($col = 0; $col < sizeof($all_criteria); $col++) {
        echo "<td>".$square_2[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";



$comp2=array();$sum=0;
for ($row = 0; $row < sizeof($all_criteria); $row++) {
  $comp2[$row]=0;
  for ($col = 0; $col < sizeof($all_criteria); $col++) {
    $comp2[$row]=$comp2[$row]+$square_2[$row][$col];
  }
  $sum=$sum +  $comp2[$row];
}

$criteriaRanking =array();
for ($col = 0; $col < sizeof($all_criteria); $col++) {
  echo "the value is: ";
        echo "<td>".$comp2[$col]."</td>";echo "<br>";
      echo "normalized value is  ";
      echo ($comp2[$col]/$sum);echo "<br>";echo "<br>";

      $criteriaRanking[$col] = ($comp2[$col]/$sum);
     /* DB::table('application_criteria_ranking')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->where('cp_id',$all_criteria[$col])
            ->update(['normalize_2' =>($comp2[$col]/$sum)]);*/

      }

echo "<br>";

for ($col = 0; $col < sizeof($all_criteria); $col++) {
   echo $criteriaRanking[$col];
  echo "<br>";
  }

echo "<br>";

$projectRanking =  DB::table('alternative_ranking')->where('project_id', $project)->pluck('normalize_2');

echo "<br>";
$all_alternatives = DB::table('project_alternative')->where('project_id', $project)->pluck('ap_id');

for ($col = 0; $col < (sizeof($all_criteria)*sizeof($all_alternatives)); $col++) {
   //echo $projectRanking[$col];
 // / echo "<br>";
  }

echo "<br>";
$projArray = [[]];
$k=0;
for($row = 0;$row <sizeof($all_criteria);$row++){
  
  for ($col = 0; $col <sizeof($all_alternatives); $col++) {

          $projArray[$col][$row] =  $projectRanking[$k];
          $k++;

  }

}

 //var_dump($projArray);
$arr1=array("Public","Private","Hybrid");
 echo "<table border='1'>";
 echo "<tr>";echo "<th>&nbsp;</th>";
echo "<th>Scalability </th>";
echo "<th> Security </th>";
echo "<th> Latency </th>";
echo "<th> IO Intensity </th>";
echo "</tr>";
    for ($row = 0; $row < sizeof($all_alternatives); $row++) {
      echo "<tr>";echo "<td><b>".$arr1[$row]."</b></td>";
      for ($col = 0; $col <sizeof($all_criteria); $col++) {
        echo "<td>".$projArray[$row][$col]."</td>";
      }
      echo "</tr>";
    }
    echo "</table>";
    echo "<br>";

$sum=0;
$finalRank =array();
$compareArray = array();
for($c=0; $c<sizeof($all_alternatives); $c++)
         {  
             
               for($k=0; $k<sizeof($all_criteria); $k++)
               {
                  
                  $sum = $sum + $projArray[$c][$k] * $criteriaRanking[$k];
                  
               }
 

               $finalRank[$c] = $sum;
              
               $sum = 0;
           
         }


echo "<br>";
$project_alts = DB::table('project_alternative')->where('project_id', $project)->pluck('alternative_id');
$rankArray =array();
for ($col = 0; $col < sizeof($project_alts); $col++) {
   echo $project_alts[$col];
   echo "     ";
   echo $finalRank[$col];
  echo "<br>";
  $rankArray[$project_alts[$col]] = $finalRank[$col];
  
  }
  //print_r($rankArray);

arsort($rankArray);

//print_r($rankArray);
echo "<br>";
$i=0;
foreach ($rankArray as $key => $value) {

 $compareArray[$i] = $key;
 
 $i++;
}

echo "final result-------------";
$cloudNames =array();
$j=1;
for($i=0;$i<sizeof($project_alts);$i++){

  //echo $compareArray[$i];
  $varName = DB::table('alternatives')->where('id', $compareArray[$i])->value('name');

  $cloudNames[] = $varName;

 /* DB::table('application_alternative_ranking')->insert(
        ['project_id' => $project, 
        'application_id'=>$application_id,
        'alternative_id'=>$compareArray[$i],
        'ranking'=>$j,
        ]
        );*/
$j++;
//echo "<br>";

}


echo "<br>";

for($i=0;$i<sizeof($project_alts);$i++){

  echo $cloudNames[$i]; echo "<br>";

}


/* DB::table('application_project')
            ->where('project_id',$project)
            ->where('application_id',$application_id)
            ->update(['cloud_suitability_1' =>$cloudNames[0],
                      'cloud_suitability_2' =>$cloudNames[1],
                      'cloud_suitability_3' =>$cloudNames[2],
                      'completed' => 2]);*/
echo "<br>";
return "Success";


    }

  }
